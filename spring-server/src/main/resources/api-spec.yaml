openapi: 3.0.1
info:
  title: Articles app API
  description: "API de mon grand projet qui n'a pas encore de nom. App sur laquelle on peut poster des articles et int√©ragir avec ceux-ci."
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
tags:
  - name: articles
    description: Operations about articles
  - name: comments
    description: Operations about comments
  - name: users
    description: Operations about users
  - name: categories
    description: Operartions about categories

paths:
  /articles:
    get:
      tags:
        - articles
      summary: Finds all articles by date
      operationId: findArticlesByDate
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetArticle'
        404:
          description: Articles not found
          content: {}
    post:
      tags:
        - articles
      summary: Creates a new article
      operationId: createArticle
      requestBody:
        description: Article that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArticle'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
  /articles/byCategories:
    get:
      tags:
        - articles
      summary: Finds articles by categories
      operationId: findArticlesByCategories
      parameters:
        - name: categories
          in: query
          description: Categories to filter by
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: integer
              format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetArticle'
        400:
          description: Invalid category
          content: {}
  /articles/{articleId}:
    get:
      tags:
        - articles
      summary: Find article by ID
      description: Returns a single article by ID
      operationId: FindArticleById
      parameters:
        - name: articleId
          in: path
          description: ID of the article to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetArticle'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Article not found
          content: {}
    patch:
      tags:
        - articles
      summary: Updates an article by ID
      operationId: updateArticleById
      parameters:
        - name: articleId
          in: path
          description: ID of article that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: updated article
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArticle'
        required: true
      responses:
        200:
          description: updated successfully
        405:
          description: Invalid input
          content: {}
    delete:
      tags:
        - articles
      summary: Deletes an article by ID
      operationId: deleteArticleById
      parameters:
        - name: articleId
          in: path
          description: Article id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: deleted successfully
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Article not found
          content: {}
  /articles/{articleId}/comments:
    get:
      tags:
        - comments
      summary: returns an array of comments for a particular article
      operationId: findCommentsByArticle
      parameters:
        - name: articleId
          in: path
          description: Id of the article
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetComment'
        400:
          description: Invalid tag value
          content: {}
    post:
      tags:
        - comments
      summary: add a new comment to an article
      operationId: addCommentToAnArticle
      parameters:
        - name: articleId
          in: path
          description: ID of the article
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: comment to add to the article
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateComment'
      responses:
        200:
          description: added successfully
        405:
          description: Invalid input
          content: {}
  /articles/{articleId}/comments/{commentId}:
    get:
      tags:
        - comments
      summary: returns a comment by ID
      operationId: findCommentbyID
      parameters:
        - name: commentId
          in: path
          description: ID of the comment
          required: true
          schema:
            type: integer
            format: int64
        - name: articleId
          in: path
          description: ID of the article
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetComment'
        400:
          description: Invalid tag value
          content: {}
    patch:
      tags:
        - comments
      summary: Updates a comment by ID
      operationId: updateCommentbyId
      parameters:
        - name: commentId
          in: path
          required: true
          description: ID of the comment that needs to be updated
          schema:
            type: integer
            format: int64
        - name: articleId
          in: path
          description: ID of the article
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: updated comment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateComment'
      responses:
        200:
          description: updated successfully
        405:
          description: Invalid input
          content: {}
    delete:
      tags:
        - comments
      summary: Deletes a comment by ID
      operationId: deleteComment
      parameters:
        - name: commentId
          in: path
          description: ID of the comment to delete
          required: true
          schema:
            type: integer
            format: int64
        - name: articleId
          in: path
          description: Article ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: deleted successfully
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Comment not found
          content: {}
  /users:
    post:
      tags:
        - users
      summary: Register a  user
      description: register a user
      operationId: RegisterUser
      requestBody:
        description: Article that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
    get:
      tags:
        - users
      summary: gets all users
      operationId: getUsers
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetUser'

  /users/{userId}:
    get:
      tags:
        - users
      summary: Get user by user id
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: 'The name that needs to be fetched.'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUser'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    patch:
      tags:
        - users
      summary: Update a user by ID
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
    delete:
      tags:
        - users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
  /categories:
    get:
      tags:
        - categories
      summary: Finds all categories
      operationId: findCategories
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetCategory'
    post:
      tags:
        - categories
      summary: Add a new category
      operationId: addCategory
      requestBody:
        description: Category that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategory'
        required: true
      responses:
        200:
          description: successful operation
        405:
          description: Invalid input
          content: {}
  /categories/{categoryId}:
    get:
      tags:
        - categories
      summary: finds a category by Id
      operationId: findCategoryById
      parameters:
        - name: categoryId
          in: path
          description: category to find
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCategory'
    patch:
      tags:
        - categories
      summary: updates a category by Id
      operationId: updateCategoryById
      parameters:
        - name: categoryId
          in: path
          description: category to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: updated category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategory'
        required: true
      responses:
        200:
          description: successful operation
    delete:
      tags:
        - categories
      parameters:
        - name: categoryId
          in: path
          description: category to delete
          required: true
          schema:
            type: integer
            format: int64
      summary: deletes a category by ID
      operationId: deleteACategory
      responses:
        200:
          description: successful operation


components:
  schemas:
    CreateUser:
      required:
        - username
        - firstName
        - lastName
        - email
        - password
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
    GetUser:
      required:
        - id
        - username
        - firstName
        - lastName
        - email
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
    UpdateUser:
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
    CreateArticle:
      required:
        - title
        - author_id
        - content
        - createdAt
      type: object
      properties:
        title:
          type: string
          example: my super article
        content:
          type: string
        photoUrls:
          type: array
          items:
            type: string
        author_id:
          type: integer
          format: int64
        categories_ids:
          type: array
          items:
            type: integer
            format: int64
    GetArticle:
      required:
        - id
        - title
        - author
        - content
        - createdAt
        - views
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        author:
          $ref: '#/components/schemas/GetUser'
        content:
          type: string
        photoUrls:
          type: array
          items:
            type: string
        createdAt:
          type: string
          example: '12-02-2013H12-05'
        lastUpdateAt:
          type: string
          example: '12-02-2013H12-05'
        views:
          type: integer
          example: 456
        comments:
          type: array
          items:
            $ref: '#/components/schemas/GetComment'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/GetCategory'
    UpdateArticle:
      required:
        - title
        - content
        - views
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        photoUrls:
          type: array
          items:
            type: string
        views:
          type: integer
          example: 456
        categories_ids:
          type: array
          items:
            type: integer
        comments_ids:
          type: array
          items:
            type: integer
    CreateComment:
      required:
        - content
        - title
        - author
      type: object
      properties:
        title:
          type: string
          example: article nul
        content:
          type: string
          example: tu pourrais faire mieux
        author:
          type: integer
          format: int64
    GetComment:
      required:
        - id
        - content
        - title
        - author
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          example: article nul
        content:
          type: string
          example: tu pourrais faire mieux
        author:
          $ref: '#/components/schemas/GetUser'
    GetCategory:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    CreateCategory:
      required:
        - name
      type: object
      properties:
        name:
          type: string

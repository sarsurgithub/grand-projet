/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.swagger.articles.api;

import io.swagger.articles.api.model.CreateCategory;
import io.swagger.articles.api.model.GetCategory;
import java.util.List;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-09-01T15:06:31.171958+02:00[Europe/Zurich]")

@Validated
@Api(value = "categories", description = "the categories API")
public interface CategoriesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Add categories", nickname = "addCategories", notes = "", tags={ "categories", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/categories",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> addCategories(@ApiParam(value = "Categories that needs to be added" ,required=true )  @Valid @RequestBody List<CreateCategory> createCategory) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "deletes a category by ID", nickname = "deleteACategory", notes = "", tags={ "categories", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/categories/{categoryId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteACategory(@ApiParam(value = "category to delete",required=true) @PathVariable("categoryId") Long categoryId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Finds all categories", nickname = "findCategories", notes = "", response = GetCategory.class, responseContainer = "List", tags={ "categories", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GetCategory.class, responseContainer = "List") })
    @RequestMapping(value = "/categories",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<GetCategory>> findCategories() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "finds a category by Id", nickname = "findCategoryById", notes = "", response = GetCategory.class, tags={ "categories", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GetCategory.class) })
    @RequestMapping(value = "/categories/{categoryId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<GetCategory> findCategoryById(@ApiParam(value = "category to find",required=true) @PathVariable("categoryId") Long categoryId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "return the ids for a given category names array", nickname = "getCategoriesIds", notes = "", response = Long.class, responseContainer = "List", tags={ "categories", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Long.class, responseContainer = "List") })
    @RequestMapping(value = "/categories/getIds",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Long>> getCategoriesIds(@NotNull @ApiParam(value = "categories to get the ids", required = true) @Valid @RequestParam(value = "name", required = true) List<String> name) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "0";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "updates a category by Id", nickname = "updateCategoryById", notes = "", tags={ "categories", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/categories/{categoryId}",
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<Void> updateCategoryById(@ApiParam(value = "category to update",required=true) @PathVariable("categoryId") Long categoryId,@ApiParam(value = "updated category" ,required=true )  @Valid @RequestBody CreateCategory createCategory) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}

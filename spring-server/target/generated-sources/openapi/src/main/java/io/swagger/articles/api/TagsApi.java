/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.swagger.articles.api;

import io.swagger.articles.api.model.Tag;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-04-14T12:07:53.741031+02:00[Europe/Zurich]")

@Validated
@Api(value = "tags", description = "the tags API")
public interface TagsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Add a new tag", nickname = "addTag", notes = "", tags={ "tags", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/tags",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> addTag(@ApiParam(value = "Tag that needs to be added" ,required=true )  @Valid @RequestBody Tag tag) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "deletes a tag by ID", nickname = "deleteAtag", notes = "", tags={ "tags", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/tags/{tagId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteAtag(@ApiParam(value = "tag to delete",required=true) @PathVariable("tagId") String tagId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "finds a tag by Id", nickname = "findATagById", notes = "", tags={ "tags", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/tags/{tagId}",
        method = RequestMethod.GET)
    default ResponseEntity<Void> findATagById(@ApiParam(value = "Tag to delete",required=true) @PathVariable("tagId") String tagId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Finds all tags", nickname = "findtags", notes = "", response = Tag.class, responseContainer = "List", tags={ "tags", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Tag.class, responseContainer = "List") })
    @RequestMapping(value = "/tags",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Tag>> findtags() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "updates a tag by Id", nickname = "updateTagById", notes = "", tags={ "tags", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/tags/{tagId}",
        method = RequestMethod.PATCH)
    default ResponseEntity<Void> updateTagById(@ApiParam(value = "tag to delete",required=true) @PathVariable("tagId") String tagId,@ApiParam(value = "updated tag" ,required=true )  @Valid @RequestBody Tag tag) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
